@page "/admin/confirm/orders"
@inject OrdersController service

<div class="col-12">
    <div class="card">
        <div class="card-header">
            <h4>Database Orders</h4>&nbsp;<a class="btn btn-outline-primary" href="/add/blog">Add Post</a>&nbsp;
            <strong align="right"><i>&nbsp;-&nbsp;@list.Count()&nbsp;Orders</i></strong>
        </div>
        <div class="card-header-form">
            <EditForm Model="@search" OnSubmit="Get">
                <div class="input-group col-md-8 col-sm-8">
                    <InputText type="text" @bind-Value="@search.input" class="form-control" placeholder="Search by date or order ID" />
                    <div class="input-group-btn">
                        <button class="form-control btn btn-primary" type="submit"><i class="fas fa-search"></i></button>
                    </div>
                    <div class="input-group-btn">
                        <button class="form-control btn btn-warning" @onclick="refresh"><i class="fa fa-refresh"></i></button>
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover" style="width:100%;">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Full Name</th>
                            <th>Email</th> 
                            <th>Phone No</th> 
                            <th>Time</th>
                            <th>Expected Date</th>
                            <th>Total Price</th>
                            <th>Payment Method</th>
                            <th>Status</th>
                            <th>Payment Confirmed</th>
                            
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (@list != null)
                        {

                            @foreach (var item in list)
                            {

                                <tr>
                                    <td><small><i>@item.OrderId</i></small></td>
                                    <td>@item.FirstName&nbsp;@item.LastName</td>
                                    <td>@item.Email</td>
                                    <td>@item.PhoneNo</td>
                                    <td>@(@item.DateTime)</td>
                                    <td>@item.ExpectedDate</td>
                                    <td>@item.TotalPrice</td>
                                    <td>@item.PaymentMethod</td>
                                     <td>@item.Status</td>
                                    @if(item.PaymentConfirmed == true)
                                    {
                                        <td><p class="btn btn-success">@item.PaymentConfirmed</p></td>
                                        
                                    }
                                    @if(item.PaymentConfirmed == false)
                                    {
                                        <td><p class="btn btn-danger">@item.PaymentConfirmed</p></td>
                                        
                                    }
                                    
                                    <td><a class="btn btn-primary" href="/order/details/@item.OrderId"><i class="fa fa-eye"></i></a></td>
                                    <td><button class="btn btn-danger" @onclick="@(async ()=> await Delete(@item.OrderId))"><i class="fa fa-trash"></i></button></td>
                                </tr>

                            }

                        }
                        @if(list.Count() == 0)
                        {

                            <tr><td><i>No data available</i></td></tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@code {
    public List<Order> list = new();

    protected override async Task OnInitializedAsync()
    {
        await Get();

    }
    public Search search = new();
    public class Search
    {
        public string input { get; set; }
    }


    public async Task refresh()
    {
        try
        {
            var res = await service.GetOrders();
            list = res.OrderByDescending(s => s.OrderId).ToList();

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
    public async Task Get()
    {
        try
        {
            var res = await service.GetOrders();
            if (search.input == null)
            {
                list = res.OrderByDescending(s => s.OrderId).ToList();
            }
            else
            {
                list = res.Where(s => s.OrderId.ToString().ToLowerInvariant().Contains(search.input.ToLowerInvariant()) || s.DateTime.ToShortDateString().ToLowerInvariant().Contains(search.input.ToLowerInvariant())).ToList();
            }

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    public async Task Delete(Guid id)
    {

        try
        {
            await service.DeleteOrder(id);
            await Get();

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

   
    

}
